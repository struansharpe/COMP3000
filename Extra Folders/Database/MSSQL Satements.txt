USE COMP3000_SSharpe
GO
//all ID's are sequence 
//Create user table where UID is primary key, friendly name is the users first name they want to be referred by, passowr and email

CREATE TABLE [User]
(UID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_UID UNIQUE(UID),
CONSTRAINT PK_UID PRIMARY KEY NONCLUSTERED (UID),
FriendlyName varchar (50) NOT NULL,
[Password] varchar (50) NOT NULL,
Email varchar(50) NOT NULL
);
GO


//create household table PK HousHold Id , HHName is the house name, admin user is the primary user of a houshold and has full control of houshold, the users are foreign keys from the user table

CREATE TABLE HouseHold
(HHID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_HHID UNIQUE(HHID),
CONSTRAINT PK_HHID PRIMARY KEY NONCLUSTERED (HHID),
HHName varchar (50)NOT NULL,
AdminUser int NOT NULL,
CONSTRAINT FK_AdminUser FOREIGN KEY (AdminUser)
        REFERENCES [User] (UID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
RestrictedUsers int,
CONSTRAINT FK_RestrictedUsers FOREIGN KEY (RestrictedUsers)
        REFERENCES [User] (UID)
		ON DELETE NO ACTION
        ON UPDATE NO ACTION
 );
GO





//Create Room table Room ID is PK RoomName is the name of the room , and The House Hold ID as a FK from HouseHold

CREATE TABLE Room
(RID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_RID UNIQUE(RID),
CONSTRAINT PK_RID PRIMARY KEY NONCLUSTERED (RID),
RoomName varchar (50)NOT NULL,
HHID int CONSTRAINT FK_HHID FOREIGN KEY (HHID)
        REFERENCES HouseHold(HHID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION
);
GO


//StorageSpace table where storage space id is PK, storage name is its name and Room ID as FK

CREATE TABLE StorageSpace
(SSID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_SSID UNIQUE(SSID),
CONSTRAINT PK_SSID PRIMARY KEY NONCLUSTERED (SSID),
StorageName varchar (50)NOT NULL,
RID int CONSTRAINT FK_RID FOREIGN KEY (RID)
        REFERENCES Room (RID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION
);
GO


//Item Type table that has item type ID as pk and Item Type name this is the generic item like beans, sausages

CREATE TABLE ItemType
(ITID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_IYID UNIQUE(ITID),
CONSTRAINT PK_ITID PRIMARY KEY NONCLUSTERED (ITID),
ITName varchar (50) NOT NULL
);
GO

//item table that has Item ID as the primary key, itemname which is the specific name or brand of an item like heinz beans, with Item Type ID as a foreign key
CREATE TABLE Item
(IID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_IID UNIQUE(IID),
CONSTRAINT PK_IID PRIMARY KEY NONCLUSTERED (IID),
ItemName varchar (50) NOT NULL,
ITID int CONSTRAINT FK_ITID FOREIGN KEY (ITID)
        REFERENCES ItemType (ITID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION
);
GO



//HouseHoldItem table that has HouseHold Item ID as PK, and has HouseHold ID Item ID and storage space as Foreign Keys

CREATE TABLE HouseHoldItem
(HHIID int IDENTITY(1,1) NOT NULL,
CONSTRAINT AK_HHIID UNIQUE(HHIID),
CONSTRAINT PK_HHIID PRIMARY KEY NONCLUSTERED (HHIID),
QTY int NOT NULL,
SSID int CONSTRAINT FK_SSID FOREIGN KEY (SSID)
        REFERENCES StorageSpace (SSID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
		IID int CONSTRAINT FK_IID FOREIGN KEY (IID)
        REFERENCES Item (IID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
		HHID int CONSTRAINT FK_HHoldID FOREIGN KEY (HHID)
        REFERENCES HouseHold(HHID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION
);
GO


//create shopping list table, has shopping list id as primary key and household id as a foreign key
CREATE TABLE ShoppingList
(SLID int IDENTITY(1,1) NOT NULL,
CONSTRAINT PK_SLID PRIMARY KEY NONCLUSTERED (SLID),

		HHID int CONSTRAINT FK_HouseholdID FOREIGN KEY (HHID)
        REFERENCES HouseHold (HHID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,

);
GO

//shopping list item shopping list item ID as Primary key, shopping list ID as foreign key Item ID, QTY int and Urgent as a bool


CREATE TABLE ShoppingListItems
(SLIID int IDENTITY(1,1) NOT NULL,
CONSTRAINT PK_SLIID PRIMARY KEY NONCLUSTERED (SLIID),
SLID int CONSTRAINT FK_SLID FOREIGN KEY (SLID)
REFERENCES ShoppingList (SLID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
IID int NOT NULL
CONSTRAINT FK_ItemID FOREIGN KEY (IID)
        REFERENCES Item (IID)
		ON DELETE NO ACTION
        ON UPDATE NO ACTION,
		QTY int NOT NULL,
		Urgent bit NOT NULL
);
GO

//create recipe table with Recipe ID as primary key, has details and instructions for meal and UserID as  foreign key 

CREATE TABLE Recipe
(RecipeID int IDENTITY(1,1) NOT NULL,
CONSTRAINT PK_RecipeID PRIMARY KEY NONCLUSTERED (RecipeID),
Details varchar (200) NOT NULL,
Instructions varchar (MAX) NOT NULL,
UserID int CONSTRAINT FK_User FOREIGN KEY (UserID)
        REFERENCES [User] (UID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION
		

);
GO

//RecipeItem for ingredients of a recipe, Recipe Item ID as pk, Item  as Item Id and Recipe ID as FK with QTY and Wight attributes
CREATE TABLE RecipeItem
(RecipeIID int IDENTITY(1,1) NOT NULL,
CONSTRAINT PK_RecipeIID PRIMARY KEY NONCLUSTERED (RecipeIID),
Item int CONSTRAINT FK_RecipeItemID FOREIGN KEY (Item)
REFERENCES Item (IID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
		RecipeID int CONSTRAINT FK_RecipeID FOREIGN KEY (RecipeID)
REFERENCES Recipe (RecipeID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
QTY int NOT NULL,
Weight int 
);
GO 


//desire stock to dictate how much a user wants of each item and is the qty we add to the shopping list


CREATE TABLE DesiredStock
(IID int 
CONSTRAINT FK_DSIID FOREIGN KEY (IID)
        REFERENCES Item (IID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
		HHID int 
CONSTRAINT FK_DSHHID FOREIGN KEY (HHID)
        REFERENCES HouseHold (HHID)
ON DELETE NO ACTION
        ON UPDATE NO ACTION,
		CONSTRAINT PK_HHIDIID PRIMARY KEY (IID,HHID),
		QTY int NOT NULL
)





//trigger tjat after a houseHold is inserted Insert a New Shopping List where HHID== the one just created


CREATE TRIGGER CreateHouseHoldShoppingList ON HouseHold
AFTER INSERT
AS 
BEGIN
INSERT INTO ShoppingList(HHID)
SELECT i.HHID 
FROM 
inserted i;
END
GO










USE [COMP3000_SSharpe]
GO

//create / altered trigger for adding item to shopping list once low or 0


ALTER TRIGGER [dbo].[addingToShoppingList] ON [dbo].[HouseHoldItem]
For UPDATE 
AS

//declare variables to hold values from differnt tables, to hold the household id
DECLARE @HouseHoldID int
SELECT  @HouseHoldID = HHID
FROM inserted

//item id from item

DECLARE @ItemID int
SELECT @ItemID = IID
FROM inserted

//QTY From theHouseholdItem

DECLARE @ActualQTY int
SELECT @ActualQTY = QTY
FROM HouseHoldItem
WHERE HHID = @HouseHoldID
AND IID = @ItemID


//Shopping list ID from Shopping List

DECLARE @ShoppingListID int
SELECT @ShoppingListID = SLID
FROM ShoppingList
WHERE HHID = @HouseHoldID

//Desired QTY from desired stock

DECLARE @DesiredQTY int
SELECT @DesiredQTY = QTY
FROM dbo.DesiredStock
WHERE HHID = @HouseHoldID
AND IID = @ItemID

//Declare Urgency if the actual QTY is more than 1 return the function trigger, if QTY =0 Delete from household item where QTY =0 and add to Shopping list with urgency is true, else urgency is false

DECLARE @Urgency bit
if(@ActualQTY> 1 )
RETURN;
if(@ActualQTY=0)
BEGIN
DELETE FROM HouseHoldItem
WHERE QTY = 0;
SET @Urgency = 1;
END;
ELSE 
SET @Urgency = 0;


//select attributes from shopping list items where the created variables = the accompanying attribute in Shopping List Items, update the the database, set urgency and insert into Shopping List Items

BEGIN
IF EXISTS (SELECT * FROM ShoppingListItems WHERE @ShoppingListID = SLID AND @ItemID = IID)
UPDATE dbo.ShoppingListItems 
SET dbo.ShoppingListItems.Urgent = @Urgency
ELSE
INSERT INTO ShoppingListItems VALUES (@ShoppingListID,@ItemID, @DesiredQTY, @Urgency)
END;










//trigger on shopping list item, a button should make the value of qty = 0, when this happens item is removed form the shopping list and added to the householod item table


CREATE TRIGGER AddFromShoppingListToHHI ON ShoppingListItems
AFTER UPDATE 
AS
DECLARE @TransferrableQTY int
SELECT @TransferrableQTY = QTY
FROM deleted

DECLARE @ShoppingListItemID int
SELECT @ShoppingListItemID = SLIID
FROM deleted

DECLARE @CheckingQTY int
SELECT @CheckingQTY = QTY
FROM inserted

DECLARE @ShoppingListID int
SELECT @ShoppingListID = SLID
FROM deleted

DECLARE @HouseHold int
SELECT @HouseHold = HHID
FROM ShoppingList
WHERE SLID = @ShoppingListID

DECLARE @BoughtItem int 
SELECT @BoughtItem = IID
FROM deleted

DECLARE @CurrentStock int
SELECT @CurrentStock = QTY
FROM HouseHoldItem
WHERE IID = @BoughtItem AND HHID = @HouseHold


DECLARE @NewStockAmount int
SET @NewStockAmount = @CurrentStock + @TransferrableQTY
 

IF(@CheckingQTY = 0)
BEGIN
DELETE FROM dbo.ShoppingListItems WHERE SLIID = @ShoppingListItemID

IF EXISTS (SELECT * FROM HouseHoldItem WHERE IID = @BoughtItem AND HHID = @HouseHold)
UPDATE dbo.HouseHoldItem 
SET QTY = @NewStockAmount
WHERE IID = @BoughtItem AND HHID = @HouseHold
ELSE 
INSERT INTO HouseHoldItem VALUES (@TransferrableQTY, null,  @BoughtItem, @HouseHold)
END;










//trigger for adding desired stock values on insertiung into house hold item

USE COMP3000_SSharpe
GO

CREATE TRIGGER AddToDesiredStock ON HouseHoldItem
AFTER INSERT
AS
DECLARE @InsertedHH int
SELECT @InsertedHH = HHID
FROM inserted

DECLARE @InsertedItem int
SELECT @InsertedItem = IID
FROM inserted

Declare @InsertedQTY int 
SELECT @InsertedQTY = QTY
FROM inserted

IF EXISTS (SELECT * FROM HouseHoldItem WHERE IID = @InsertedItem AND HHID = @InsertedHH)
RETURN;
ELSE 
INSERT INTO DesiredStock VALUES (@InsertedItem, @InsertedHH, @InsertedQTY)



